# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# ESLint is a tool for identifying and reporting on patterns
# found in ECMAScript/JavaScript code.
# More details at https://github.com/eslint/eslint
# and https://eslint.org

name: ESLint

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '18 20 * * 3'

jobs:
  eslint:
    name: Run ESLint scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps (ensure ESLint + SARIF formatter)
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          # Make sure eslint + sarif formatter exist even if not in devDeps
          npm ls eslint >/dev/null 2>&1 || npm i -D eslint
          npm ls @microsoft/eslint-formatter-sarif >/dev/null 2>&1 || npm i -D @microsoft/eslint-formatter-sarif

      - name: Run ESLint â†’ produce SARIF
        id: lint
        env:
          SARIF_ESLINT_IGNORE_SUPPRESSED: "true"
        shell: bash
        run: |
          set -o pipefail
          CONFIG_ARG=""
          for f in .eslintrc.js .eslintrc.cjs .eslintrc.json .eslintrc.yml .eslintrc.yaml; do
            if [ -f "$f" ]; then CONFIG_ARG="--config $f"; break; fi
          done

          # Run eslint; do NOT fail the job yet
          npx eslint . \
            $CONFIG_ARG \
            --ext .js,.jsx,.ts,.tsx \
            --format @microsoft/eslint-formatter-sarif \
            --output-file eslint-results.sarif \
          || echo "ESLint returned non-zero, continuing to upload SARIF."

          # If SARIF wasn't produced (crash, no files matched), create a minimal valid SARIF
          if [ ! -s eslint-results.sarif ]; then
            echo 'No SARIF produced, creating a minimal SARIF to avoid upload step failure.'
            cat > eslint-results.sarif <<'EOF'
            {
              "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
              "version": "2.1.0",
              "runs": [{
                "tool": { "driver": { "name": "ESLint", "informationUri": "https://eslint.org" } },
                "results": []
              }]
            }
            EOF
          fi

          echo "SARIF file status:"
          ls -l eslint-results.sarif
          echo "First 200 chars:"
          head -c 200 eslint-results.sarif || true

      - name: Upload SARIF to GitHub Code Scanning
        if: always()   # run even if ESLint failed
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      # Optionally fail the job after upload if ESLint had errors
      - name: Fail if ESLint step failed
        if: failure() || steps.lint.outcome == 'failure'
        run: |
          echo "Failing the job because ESLint reported errors (after uploading SARIF)."
          exit 1
